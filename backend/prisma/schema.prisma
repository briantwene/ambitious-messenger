generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model chat {
  chat_id    Int       @id @default(autoincrement())
  chat_name  String?   @db.VarChar
  is_private Boolean?
  member     member[]
  message    message[]
}

model member {
  id            Int       @id @default(autoincrement())
  user_id       Int?
  chat_id       Int?
  joined_date   DateTime? @db.Timestamp(6)
  left_datetime DateTime? @db.Timestamp(6)
  username      String?   @db.VarChar
  chat          chat?     @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
  user          user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model message {
  id           Int       @id @default(autoincrement())
  from         String
  message_text String?
  sent         DateTime? @db.Timestamp(6)
  isEdited     Boolean   @default(false) //update a message is true
  chat_id      Int?
  chat         chat?     @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction)
  user         user?     @relation(fields: [from], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  user_id               Int              @id @default(autoincrement())
  username              String           @unique @db.VarChar
  email                 String?          @unique @db.VarChar
  password              String?          @db.VarChar
  member                member[]
  message               message[]
  friendshipUser        friendships[]    @relation("FriendshipUser")
  friendshipFriend      friendships[]    @relation("FriendshipFriend")
  friendRequestSent     friendRequests[] @relation("FriendRequestSender")
  friendRequestReceived friendRequests[] @relation("FriendRequestReceiver")
}

model friendRequests {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  created_at  DateTime @default(now())
  status      Int      @default(0) // 0: Pending, 1: Accepted, 2: Declined
  sender      user     @relation("FriendRequestSender", fields: [sender_id], references: [user_id])
  receiver    user     @relation("FriendRequestReceiver", fields: [receiver_id], references: [user_id])

  @@unique([sender_id, receiver_id]) // Unique constraint to prevent duplicate requests
}

model friendships {
  id        Int  @id @default(autoincrement())
  user_id   Int
  friend_id Int
  status    Int  @default(1) // 1: Active, 0: Inactive (unfriended)
  user      user @relation("FriendshipUser", fields: [user_id], references: [user_id])
  friend    user @relation("FriendshipFriend", fields: [friend_id], references: [user_id])
}
